#!/usr/bin/env python3
"""
FaceAuth - Local Face Authentication System
===========================================

Main CLI interface for the FaceAuth system.
Provides commands for face enrollment, authentication, and file encryption.

Usage:
    python main.py enroll-face [--user-id USER] [--model MODEL]
    python main.py verify-face [--user-id USER]
    python main.py encrypt-file [--file PATH] [--user-id USER]
    python main.py decrypt-file [--file PATH] [--user-id USER]
"""

import click
import sys
import os
from pathlib import Path

# Add current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from enrollment import enroll_new_user, FaceEnrollmentError


@click.group()
@click.version_option(version="1.0.0")
def cli():
    """
    üîê FaceAuth - Local Face Authentication System
    
    A privacy-first face authentication platform for securing your files.
    All processing happens locally - no cloud, no third parties.
    """
    pass


@cli.command("enroll-face")
@click.option(
    "--user-id", 
    "-u", 
    type=str, 
    help="Unique identifier for the user (will prompt if not provided)"
)
@click.option(
    "--model", 
    "-m", 
    type=click.Choice(["Facenet", "ArcFace", "VGG-Face", "Facenet512"], case_sensitive=False),
    default="Facenet",
    help="Face recognition model to use (default: Facenet)"
)
@click.option(
    "--data-dir",
    "-d",
    type=click.Path(),
    default="face_data",
    help="Directory to store face data (default: face_data)"
)
def enroll_face(user_id, model, data_dir):
    """
    üì∏ Enroll a new user's face into the system.
    
    This command captures your face using the webcam, generates a secure
    face embedding, and stores it locally in encrypted format.
    
    The process takes about 30 seconds and requires:
    - A working webcam
    - Good lighting conditions
    - Only one person visible in the frame
    
    Examples:
        python main.py enroll-face
        python main.py enroll-face --user-id john_doe
        python main.py enroll-face --user-id alice --model ArcFace
    """
    click.echo("üöÄ Starting FaceAuth enrollment process...")
    click.echo("=" * 60)
    
    try:
        # Import here to avoid issues if dependencies aren't installed
        from enrollment import FaceEnroller
        
        # Create enroller instance
        enroller = FaceEnroller(model_name=model, data_dir=data_dir)
        
        # Perform enrollment
        result = enroller.enroll_new_user(user_id)
        
        if result['success']:
            click.echo("\nüéâ SUCCESS!")
            click.echo(f"‚úÖ User '{result['user_id']}' enrolled successfully")
            click.echo(f"üìÅ Data saved to: {result['file_path']}")
            click.echo(f"üß† Model used: {result['model_used']}")
            click.echo(f"üìä Embedding size: {result['embedding_size']} dimensions")
            click.echo("\nüîí Your face data is encrypted and stored locally")
            click.echo("‚ö†Ô∏è  Keep your password safe - it cannot be recovered!")
            
            # Next steps
            click.echo("\nüìã Next steps:")
            click.echo("‚Ä¢ Test authentication: python main.py verify-face")
            click.echo("‚Ä¢ Encrypt files: python main.py encrypt-file --file myfile.txt")
            click.echo("‚Ä¢ View help: python main.py --help")
            
        else:
            click.echo("‚ùå Enrollment failed")
            sys.exit(1)
            
    except FaceEnrollmentError as e:
        click.echo(f"\n‚ùå Enrollment Error: {e}")
        sys.exit(1)
    except ImportError as e:
        click.echo(f"\n‚ùå Missing dependencies: {e}")
        click.echo("üí° Please install required packages:")
        click.echo("   pip install -r requirements.txt")
        sys.exit(1)
    except KeyboardInterrupt:
        click.echo("\n\n‚ùå Enrollment cancelled by user")
        sys.exit(1)
    except Exception as e:
        click.echo(f"\nüí• Unexpected error: {e}")
        click.echo("üêõ Please report this issue if it persists")
        sys.exit(1)


@cli.command("verify-face")
@click.option(
    "--user-id", 
    "-u", 
    type=str, 
    help="User ID to verify against (will prompt if not provided)"
)
@click.option(
    "--model", 
    "-m", 
    type=click.Choice(["Facenet", "ArcFace", "VGG-Face", "Facenet512"], case_sensitive=False),
    default="Facenet",
    help="Face recognition model to use (default: Facenet)"
)
@click.option(
    "--data-dir",
    "-d",
    type=click.Path(),
    default="face_data",
    help="Directory containing face data (default: face_data)"
)
def verify_face(user_id, model, data_dir):
    """
    üîç Verify your identity using face authentication.
    
    This command compares your current face against stored face data
    to authenticate your identity. The verification process is fast
    and secure, completing in under 2 seconds.
    
    Requirements:
    - Enrolled face data (use 'enroll-face' first)
    - Working webcam
    - Good lighting conditions
    - Your enrollment password
    
    Examples:
        python main.py verify-face
        python main.py verify-face --user-id john_doe
        python main.py verify-face --user-id alice --model ArcFace
    """
    click.echo("üîç Starting FaceAuth verification process...")
    click.echo("=" * 60)
    
    try:
        # Import authentication module
        from authentication import FaceAuthenticator, FaceAuthenticationError
        
        # Create authenticator instance
        authenticator = FaceAuthenticator(model_name=model, data_dir=data_dir)
        
        # Perform verification
        click.echo("üöÄ Initializing face authentication...")
        verification_result = authenticator.verify_user_face(user_id)
        
        # Display results
        if verification_result:
            click.echo("\nüéâ SUCCESS!")
            click.echo("‚úÖ ACCESS GRANTED")
            click.echo("üîì Identity verified successfully")
            click.echo(f"üß† Model used: {model}")
            click.echo("‚ö° Verification completed in under 2 seconds")
            
            # Success message
            click.echo("\nüåü Authentication successful!")
            click.echo("üí° You can now use secure features:")
            click.echo("‚Ä¢ Encrypt files: python main.py encrypt-file --file myfile.txt")
            click.echo("‚Ä¢ Access protected resources")
            
        else:
            click.echo("\n‚ùå FAILURE!")
            click.echo("üö´ ACCESS DENIED")
            click.echo("‚ö†Ô∏è  Identity could not be verified")
            
            # Failure guidance
            click.echo("\nüí° Troubleshooting tips:")
            click.echo("‚Ä¢ Ensure good lighting conditions")
            click.echo("‚Ä¢ Position face clearly in camera view")
            click.echo("‚Ä¢ Remove glasses/masks if possible")
            click.echo("‚Ä¢ Try re-enrolling: python main.py enroll-face")
            
            sys.exit(1)
            
    except FaceAuthenticationError as e:
        click.echo(f"\n‚ùå Authentication Error: {e}")
        click.echo("\nüí° Common solutions:")
        click.echo("‚Ä¢ Check if user is enrolled: python main.py info")
        click.echo("‚Ä¢ Enroll first: python main.py enroll-face")
        click.echo("‚Ä¢ Verify password is correct")
        click.echo("‚Ä¢ Ensure webcam is working")
        sys.exit(1)
    except ImportError as e:
        click.echo(f"\n‚ùå Missing dependencies: {e}")
        click.echo("üí° Please install required packages:")
        click.echo("   pip install -r requirements.txt")
        click.echo("   python main.py setup")
        sys.exit(1)
    except KeyboardInterrupt:
        click.echo("\n\n‚ùå Verification cancelled by user")
        sys.exit(1)
    except Exception as e:
        click.echo(f"\nüí• Unexpected error: {e}")
        click.echo("üêõ Please report this issue if it persists")
        sys.exit(1)


@cli.command("encrypt-file")
@click.option(
    "--file", 
    "-f", 
    type=click.Path(exists=True),
    help="File to encrypt (will prompt if not provided)"
)
@click.option(
    "--user-id", 
    "-u", 
    type=str, 
    help="User ID for face authentication (will prompt if not provided)"
)
def encrypt_file(file, user_id):
    """
    üîí Encrypt a file using face authentication.
    
    This command encrypts a file and requires face authentication
    to decrypt it later.
    
    Examples:
        python main.py encrypt-file --file secret.txt
        python main.py encrypt-file --file document.pdf --user-id alice
    """
    click.echo("üîí File encryption not yet implemented")
    click.echo("üìã This feature will be available in the next version")
    click.echo("üí° Use 'enroll-face' to register your face first")


@cli.command("decrypt-file")
@click.option(
    "--file", 
    "-f", 
    type=click.Path(exists=True),
    help="Encrypted file to decrypt (will prompt if not provided)"
)
@click.option(
    "--user-id", 
    "-u", 
    type=str, 
    help="User ID for face authentication (will prompt if not provided)"
)
def decrypt_file(file, user_id):
    """
    üîì Decrypt a file using face authentication.
    
    This command decrypts a previously encrypted file after
    successful face authentication.
    
    Examples:
        python main.py decrypt-file --file secret.txt.encrypted
        python main.py decrypt-file --file document.pdf.encrypted --user-id alice
    """
    click.echo("üîì File decryption not yet implemented")
    click.echo("üìã This feature will be available in the next version")
    click.echo("üí° Use 'enroll-face' to register your face first")


@cli.command("info")
def info():
    """
    üìä Display system information and status.
    """
    click.echo("üîê FaceAuth System Information")
    click.echo("=" * 40)
    
    # Check Python version
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
    click.echo(f"üêç Python version: {python_version}")
    
    # Check if face_data directory exists
    face_data_dir = Path("face_data")
    if face_data_dir.exists():
        face_files = list(face_data_dir.glob("*_face.dat"))
        click.echo(f"üìÅ Face data directory: {face_data_dir.absolute()}")
        click.echo(f"üë• Enrolled users: {len(face_files)}")
    else:
        click.echo("üìÅ Face data directory: Not created yet")
        click.echo("üë• Enrolled users: 0")
    
    # Check dependencies
    click.echo("\nüì¶ Dependencies:")
    required_packages = ["cv2", "deepface", "numpy", "cryptography", "click"]
    
    for package in required_packages:
        try:
            if package == "cv2":
                import cv2
                click.echo(f"‚úÖ OpenCV: {cv2.__version__}")
            elif package == "deepface":
                import deepface
                click.echo(f"‚úÖ DeepFace: Available")
            elif package == "numpy":
                import numpy
                click.echo(f"‚úÖ NumPy: {numpy.__version__}")
            elif package == "cryptography":
                import cryptography
                click.echo(f"‚úÖ Cryptography: {cryptography.__version__}")
            elif package == "click":
                import click as click_pkg
                click.echo(f"‚úÖ Click: {click_pkg.__version__}")
        except ImportError:
            click.echo(f"‚ùå {package}: Not installed")
    
    click.echo("\nüîó Quick Start:")
    click.echo("1. Install dependencies: pip install -r requirements.txt")
    click.echo("2. Enroll your face: python main.py enroll-face")
    click.echo("3. Get help: python main.py --help")


@cli.command("setup")
def setup():
    """
    üõ†Ô∏è Setup and install FaceAuth dependencies.
    """
    click.echo("üõ†Ô∏è Setting up FaceAuth...")
    
    # Check if requirements.txt exists
    if not Path("requirements.txt").exists():
        click.echo("‚ùå requirements.txt not found")
        click.echo("üí° Please ensure you're in the FaceAuth directory")
        sys.exit(1)
    
    click.echo("üì¶ Installing dependencies...")
    
    try:
        import subprocess
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            click.echo("‚úÖ Dependencies installed successfully!")
            click.echo("\nüéâ FaceAuth is ready to use!")
            click.echo("üöÄ Try: python main.py enroll-face")
        else:
            click.echo("‚ùå Installation failed:")
            click.echo(result.stderr)
            sys.exit(1)
            
    except Exception as e:
        click.echo(f"‚ùå Setup failed: {e}")
        click.echo("üí° Try manually: pip install -r requirements.txt")
        sys.exit(1)


def main():
    """Main entry point for the CLI."""
    try:
        cli()
    except KeyboardInterrupt:
        click.echo("\n\nüëã Goodbye!")
        sys.exit(0)
    except Exception as e:
        click.echo(f"\nüí• Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
